{
  # Basic settings
  format = ''
    [‚ï≠](fg:current_line)\
    $os\
    $status\
    $directory\
    $git_branch\
    $git_status\
    $fill\
    $golang\
    $nodejs\
    $bun\
    $deno\
    $python\
    $java\
    $zig\
    $rust\
    $c\
    $cmd_duration\
    $time\
    $username\
    $line_break\
    $character\
  '';

  add_newline = true;

  # Module configurations
  os = {
    format = "(fg:current_line)[ÓÇ∂](fg:red)[Óúè](fg:primary bg:red)[ÓÇ¥](fg:red)(fg:current_line)[](fg:red)[](fg:primary bg:red)[](fg:red)";
    disabled = false;
  };

  status = {
    format = "[‚îÄ](fg:current_line)[](fg:status)[](fg:primary bg:status)[](fg:status bg:box)[ $status](fg:foreground bg:box)[](fg:box)[‚îÄ](fg:current_line)[ÓÇ∂](fg:status)[ÓΩ∂](fg:primary bg:status)[ÓÇ¥](fg:status bg:box)[ $status](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    pipestatus = true;
    pipestatus_separator = "-";
    pipestatus_segment_format = "$status";
    pipestatus_format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:status)[ÓΩ∂](fg:primary bg:status)[ÓÇ¥](fg:status bg:box)[ $pipestatus](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    disabled = false;
  };

  directory = {
    format = "[‚îÄ](fg:current_line)[](fg:pink)[Û∞∑è](fg:primary bg:pink)[](fg:pink bg:box)[ $read_only$truncation_symbol$path](fg:foreground bg:box)[](fg:box)[‚îÄ](fg:current_line)[ÓÇ∂](fg:pink)[Û∞∑è](fg:primary bg:pink)[ÓÇ¥](fg:pink bg:box)[ $read_only$truncation_symbol$path](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    home_symbol = "Ó≠Ü ~/";
    truncation_symbol = "ÓØü  ";
    truncation_length = 2;
    read_only = "Û±ßµ ";
    read_only_style = "";
  };

  git_branch = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:green)[$symbol](fg:primary bg:green)[ÓÇ¥](fg:green bg:box)[ $branch](fg:foreground bg:box)";
    symbol = "Ôêó";
  };

  git_status = {
    format = "[$all_status](fg:green bg:box)[ÓÇ¥](fg:box)";
    conflicted = " =";
    up_to_date = "";
    untracked = " ?$\{count}";
    stashed = " $";
    modified = " !$\{count}";
    staged = " +";
    renamed = " ¬ª";
    deleted = " ‚úò";
    ahead = " ‚á°$\{count}";
    diverged = " ‚áï‚á°$\{ahead_count}‚á£$\{behind_count}";
    behind = " ‚á£$\{count}";
  };

  nodejs = {
    format = "[‚îÄ](fg:current_line)[](fg:green)[$symbol](fg:primary bg:green)[](fg:green bg:box)[ $version](fg:foreground bg:box)[](fg:box)[‚îÄ](fg:current_line)[ÓÇ∂](fg:green)[$symbol](fg:primary bg:green)[ÓÇ¥](fg:green bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "Û∞éô Node.js";
  };

  bun = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:green)[$symbol](fg:primary bg:green)[ÓÇ¥](fg:green bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "ÓùØ Bun";
  };

  deno = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:purple)[$symbol](fg:primary bg:purple)[ÓÇ¥](fg:purple bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "ü¶ï Deno";
  };

  zig = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:blue)[$symbol](fg:primary bg:blue)[ÓÇ¥](fg:blue bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "‚ö°Ô∏è Zig";
  };

  rust = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:yellow)[$symbol](fg:primary bg:yellow)[ÓÇ¥](fg:yellow bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "Óû® Rust";
  };

  python = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:green)[$symbol](fg:primary bg:green)[ÓÇ¥](fg:green bg:box)[ (${version} )(\($virtualenv\) )](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "Óúº python";
  };

  java = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:red)[$symbol](fg:primary bg:red)[ÓÇ¥](fg:red bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "Óú∏ Java";
  };

  golang = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:red)[$symbol](fg:primary bg:red)[ÓÇ¥](fg:red bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "Û∞ëÆ Go";
  };

  c = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:blue)[$symbol](fg:primary bg:blue)[ÓÇ¥](fg:blue bg:box)[ $version](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "Óòû C";
  };

  fill = {
    symbol = "‚îÄ";
    style = "fg:current_line";
  };

  cmd_duration = {
    min_time = 500;
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:orange)[ÔÉß](fg:primary bg:orange)[ÓÇ¥](fg:orange bg:box)[ $duration](fg:foreground bg:box)[ÓÇ¥](fg:box)";
  };

  time = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:purple)[Û∞¶ñ](fg:primary bg:purple)[ÓÇ¥](fg:purple bg:box)[ $time](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    time_format = "%H:%M";
    disabled = false;
  };

  username = {
    format = "[‚îÄ](fg:current_line)[ÓÇ∂](fg:yellow)[$symbol](fg:primary bg:yellow)[ÓÇ¥](fg:yellow bg:box)[ $user](fg:foreground bg:box)[ÓÇ¥](fg:box)";
    symbol = "Û∞áº";
    show_always = true;
  };

  character = {
    format = "\n[‚ï∞‚îÄ$symbol](fg:current_line) ";
    success_symbol = "[ÔÉö](fg:bold white)";
    error_symbol = "[√ó](fg:bold red)";
  };

  profiles.transient = "$character";
}